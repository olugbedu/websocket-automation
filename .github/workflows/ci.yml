name: CI/CD Pipeline

on:
  push:
    branches:
      - main 

env:
  K8S_NAMESPACE_TEST: test
  K8S_NAMESPACE_PROD: production
  WEBSOCKET_URL: ws://websocket-server-ip:8765

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/hello-world:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/hello-world:latest

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH to EC2
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USERNAME }}
            key: ${{ secrets.EC2_SSH_KEY }}
            script: |
              git clone ${{ secrets.REPO }}
              cd /home/${{ secrets.EC2_USERNAME }}/websocket-automation
              git pull origin main
              sh setup-k8s.sh
              export KUBECONFIG=~/.kube/config
              kubectl apply -f k8s/namespaces.yaml --validate=false
              kubectl apply -f k8s/test-deployment.yaml --namespace=$K8S_NAMESPACE_TEST

      - name: Check Logs for Errors
        run: |
          sleep 5
          ERROR_LOG=$(kubectl logs -l app=helloworld -n $K8S_NAMESPACE_TEST || true)
          echo "$ERROR_LOG"
          if [[ ! -z "$ERROR_LOG" ]]; then
            echo "Sending error to WebSocket..."
            echo "$ERROR_LOG" | websocat $WEBSOCKET_URL
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: SSH to EC2
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USERNAME }}
            key: ${{ secrets.EC2_SSH_KEY }}
            script: | 
              run: kubectl apply -f k8s/prod-deployment.yaml --namespace=$K8S_NAMESPACE_PROD
